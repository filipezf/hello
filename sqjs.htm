<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>PuckWorld</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

   <!-- jquery and jqueryui -->
  <script src="PuckWorld_arquivos/analytics.js" async=""></script><script src="PuckWorld_arquivos/jquery-2.js"></script>
  <link href="PuckWorld_arquivos/jquery-ui.css" rel="stylesheet">
  <script src="PuckWorld_arquivos/jquery-ui.js"></script>

  <!-- bootstrap -->
  <script src="PuckWorld_arquivos/bootstrap.js"></script>
  <link href="PuckWorld_arquivos/bootstrap.css" rel="stylesheet">

  <!-- rljs -->
  <script type="text/javascript" src="PuckWorld_arquivos/rl.js"></script>

  <script type="application/javascript">
    var CODE = "_ D M X Y Z".split(' ');
    var epsilon = 0.2	
    var t=0;

    var updateDraw = function(a, s, r) {

      for (var i=0; i< place.length; i++){
          x = ''+ (t++) +' <br> ' 
          for (var j=0; j< place[i].a.length; j++){
              a = place[i].a[j] 
              x += '<b>'+a.i+ '</b> ' +a.e.toFixed(2) +' ; '+ a.last.join() ;
              x += '<br>'
              //console.log(x)
          }
          if (t%20==0) document.getElementById('div'+i).innerHTML = x
               
       }
   }

    var PuckWorld = function() { 
      this.reset();
    }
    PuckWorld.prototype = {
      reset: function() {
          place = []
          agent = []
          for (var i=0; i<3; i++)
               place[i] = {e:0, a:[]}

      },
      getNumStates: function() {
        return 24; // 5 ag * C? M?, 2 bits W 
      },
      getMaxNumActions: function() {
        return 6; // D, M, W0, 1,2,  nothing
      },
      getState: function(i) {
         var me = agent[i];
         var s = [ ]
         for (var j=0; j<5; j++){
               var a = agent[(j+i) % 5]
	       var v = [0,0,0,0,0,0]
               if (a.action > 0)
                   v[a.action] =1;
		v[0] = (a.e - me.e)/30
               s.concat( v)
         }
         return s;
      },
      sampleNextState: function(action,i) {
         var a = agent[i]
         a.action = action
         a.last.shift()
	a.last.push( CODE[action] )

         if (action != 1 && a.e>1){ //D
             a.e -=1
             place[a.pos].e += 1;
         }
         if (action == 20  ){ //M
             a.e = 0
             j = rndInt(3);
             oldp =  place[a.pos].a;
             oldp.splice(oldp.indexOf(a), 1);
             place[a.pos = j].a.push(a);
         }
         
         // compute reward
        var sum=0
        for (var j=0; j<5; j++)
            sum += agent[j].e

        var r = a.e - sum/5
 
        // evolve state in time
        var ns = this.getState(i);
        var out = {'ns':ns, 'r':r};
        return out;
      }
    }
    function rndInt(i){ return Math.floor(Math.random()*i);}
    var steps_per_tick = 1;
    var sid = -1;
    var action, state;

    function togglelearn() { 
      if(sid === -1) {
        sid = setInterval(function() {  

          for(var k=0;k<steps_per_tick;k++) {
            var j = rndInt(5)
            for (var i=0; i<5; i++){
                j = (j+1) %5		
                state = env.getState(j);
                action = agent[j].act(state);
                var obs = env.sampleNextState(action,j);
                agent[j].learn(obs.r);
            }
            worldStep();
          }

          updateDraw(action, state, obs.r);
 
        }, 20);
      } else {
        clearInterval(sid);
        sid = -1;
      }
    }

    function worldStep(){
         for (var i=0; i<3; i++){
             var p = place[i]
             p.e = p.e > 1.7 ? p.e*10 : p.e
             for (var j=0; j< p.a.length; j++){
                  var a =p.a[j]
                  a.e += p.e / p.a.length
                  a.e *= 0.7 
                  a.e += 1.1
             } 
             p.e = 0
         }
    }    
    function saveAgent() {
      $("#mysterybox").fadeIn();
      $("#mysterybox").val(JSON.stringify(agent.toJSON()));
    }

    function loadAgent() { //PuckWorld_arquivos
      $.getJSON( "PuckWorld_arquivos/puckagent.json", function( data ) {
        agent.fromJSON(data); // corss your fingers...
        // set epsilon to be much lower for more optimal behavior
        epsilon = 0.05;
        $("#slider").slider('value', agent.epsilon);
        $("#eps").html(agent.epsilon.toFixed(2));
        // kill learning rate to not learn
        agent.alpha = 0;
      });
    }

    function resetAgent() {
      eval($("#agentspec").val())
      for (var i=0; i<5; i++){
           var a = agent[i] = new RL.DQNAgent(env, spec);
           a.i = i
           a.e = 2;
           a.pos = rndInt(3);
           place[ a.pos].a.push(a)
      }
    }

    var w; // global world object
    var current_interval_id;
    var skipdraw = false;
    function start() { 

      env = new PuckWorld();

      eval($("#agentspec").val())

      agent = []
      for (var i=0; i<5; i++){
          //agent = new RL.ActorCritic(env, spec);
          agent[i] = new RL.DQNAgent(env, spec);
         //agent = new RL.RecurrentReinforceAgent(env, {});

              var a = agent[i] ;
              a.i = i
              a.e = 2;
              a.pos = rndInt(3);
              place[ a.pos].a.push(a)
              a.last=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      }

      // slider sets agent epsilon
      $("#slider").slider({
        min: 0,
        max: 1,
        value: epsilon,
        step: 0.01,
        slide: function(event, ui) {
              epsilon = ui.value;
          $("#eps").html(ui.value.toFixed(2));
        }
      });
      $("#eps").html(epsilon.toFixed(2));

      togglelearn(); // start


    }
 
  </script>
</head>
 <body onload="start();">

     
   <h2>PuckWorld: Deep Q Learning</h2>

<textarea id="agentspec" style="width:100%;height:230px;">// agent parameter spec to play with (this gets eval()'d on Agent reset)
var spec = {}
spec.update = 'qlearn'; // qlearn | sarsa
spec.gamma = 0.9; // discount factor, [0, 1)
spec.epsilon = 0.2; // initial epsilon for epsilon-greedy policy, [0, 1)
spec.alpha = 0.01; // value function learning rate
spec.experience_add_every = 10; // number of time steps before we add another experience to replay memory
spec.experience_size = 5000; // size of experience replay memory
spec.learning_steps_per_iteration = 20;
spec.tderror_clamp = 1.0; // for robustness
spec.num_hidden_units = 100 // number of neurons in hidden layer
</textarea>


<br>
Exploration epsilon: <span id="eps">0.20</span> <div class="ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" id="slider"><span style="left: 20.202%;" class="ui-slider-handle ui-state-default ui-corner-all" tabindex="0"></span></div>
<br>

   

<br>
<div style="float:right;">
  <button class="btn btn-primary" onclick="loadAgent()" style="width:200px;height:35px;margin-bottom:5px;margin-right:20px;">Load a Pretrained Agent</button>
</div>
<textarea id="mysterybox" style="width:100%;display:none;">mystery text box</textarea>

<div id="div0" style="color:red" >div0 </div>
<div id="div1" style="color:green" >div1 </div>
<div id="div2" style="color:blue" >div2 </div>

<div> Experience write pointer: <div id="expi" style="display:inline-block;">130</div> </div>
<div> Latest TD error: <div id="tde" style="display:inline-block;">-1.000</div> </div>
<div id="tdest"></div>

</div></body></html>